#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/34.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left hand on 42 keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand on 42 keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                 // thumbs on 42 keys

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        activate_adjust_layer {
            if-layers = <2 1>;
            then-layer = <3>;
        };
    };

    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 40 41 39>;
            hold-trigger-on-release;
        };

        com_col: com_col {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
        };

        dot_col: dot_col {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp DOT>, <&kp COLON>;
        };

        ques_excl: ques_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;
        };

        paren_brac_l: paren_brac_l {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LEFT_BRACKET>;
        };

        paren_brac_r: paren_brac_r {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp RIGHT_BRACKET>;
        };

        brace_lt_morph: brace_lt_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp LEFT_BRACE>, <&kp LESS_THAN>;
        };

        brace_gt_morph: brace_gt_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp RIGHT_BRACE>, <&kp GREATER_THAN>;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <15 20>;
            layers = <0>;
        };

        undo {
            bindings = <&kp K_UNDO>;
            key-positions = <25 26>;
            layers = <0>;
        };

        cut {
            bindings = <&kp K_CUT>;
            key-positions = <26 27>;
            layers = <0>;
        };

        copy {
            bindings = <&kp K_COPY>;
            key-positions = <27 28>;
            layers = <0>;
        };

        paste {
            bindings = <&kp K_PASTE>;
            key-positions = <28 29>;
            layers = <0>;
        };

        plus {
            bindings = <&kp KP_PLUS>;
            key-positions = <4 7>;
            layers = <0>;
        };

        minus {
            bindings = <&kp KP_MINUS>;
            key-positions = <16 19>;
            layers = <0>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <31 28>;
            layers = <0>;
        };

        parenthesis_bracket_l {
            bindings = <&paren_brac_l>;
            key-positions = <19 20>;
            layers = <0>;
        };

        parenthesis_bracket_r {
            bindings = <&paren_brac_r>;
            key-positions = <20 21>;
            layers = <0>;
        };

        brace_lt {
            bindings = <&brace_lt_morph>;
            key-positions = <31 32>;
            layers = <0>;
        };

        brace_gt {
            bindings = <&brace_gt_morph>;
            key-positions = <32 33>;
            layers = <0>;
        };
    };

    macros {
        gpt_code: gpt_code {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp RS(ENTER) &kp GRAVE &kp GRAVE &kp GRAVE &kp UP_ARROW &kp RS(ENTER)>;
            label = "GPT_CODE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        main_layer {
            bindings = <
&none                   &kp Q                &kp W            &kp F              &kp P                &kp B    &kp J      &kp L                 &kp U               &kp Y             &kp SQT           &none
&kp LS(LG(LEFT_BRACE))  &hml LEFT_COMMAND A  &hml LEFT_ALT R  &hml LEFT_SHIFT S  &hml LEFT_CONTROL T  &kp G    &kp M      &hmr RIGHT_CONTROL N  &hmr RIGHT_SHIFT E  &hmr RIGHT_ALT I  &hmr RIGHT_GUI O  &kp RG(RS(RIGHT_BRACE))
&kp EQUAL               &kp Z                &kp X            &kp C              &kp D                &kp V    &kp K      &kp H                 &com_col            &dot_col          &ques_excl        &kp EXCLAMATION
                                                              &lt 1 ESCAPE       &lt 2 SPACE          &kp TAB  &kp ENTER  &lt 2 BSPC            &lt 1 DEL
            >;

            label = "main";
        };

        raise_layer {
            bindings = <
&none  &none  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp PAGE_UP    &kp K_VOLUME_UP    &none              &none            &none          &none          &none
&none  &none  &kp LEFT    &kp UP            &kp RIGHT   &kp PAGE_DOWN  &kp K_VOLUME_DOWN  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &kp RIGHT_ALT  &kp RIGHT_GUI  &none
&none  &none  &kp HOME    &kp DOWN          &kp END     &studio_unlock &studio_unlock     &none              &none            &none          &none          &none
                          &none             &none       &none          &none              &none              &none
            >;

            label = "raise";
        };

        lower_layer {
            bindings = <
&none   &kp ASTERISK   &kp N7             &kp N8             &kp N9     &kp KP_PLUS   &none      &kp POUND                     &kp ASTERISK              &kp CARET               &kp TILDE             &none
&none   &kp KP_DIVIDE  &mt LS(LG(N4)) N4  &mt LG(LS(N5)) N5  &kp N6     &kp KP_MINUS  &none      &hmr RIGHT_CONTROL AMPERSAND  &hmr RIGHT_SHIFT AT_SIGN  &hmr RIGHT_ALT PERCENT  &hmr RIGHT_GUI GRAVE  &gpt_code
&trans  &kp N0         &kp N1             &kp N2             &kp N3     &kp KP_DOT    &none      &kp PIPE                      &kp DOLLAR                &kp BACKSLASH           &kp SLASH             &none
                                          &kp ESCAPE         &kp SPACE  &kp KP_EQUAL  &kp ENTER  &kp BACKSPACE                 &kp DELETE
            >;

            label = "lower";
        };

        adjust_layer {
            bindings = <
&none  &none  &none  &none  &none  &bootloader    &bootloader    &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &sys_reset     &sys_reset     &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &studio_unlock &studio_unlock &none  &none  &none  &none  &none
                     &none  &none  &none          &none          &none  &none
            >;

            label = "adj";
        };
    };
};
